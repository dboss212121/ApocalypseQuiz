{"ast":null,"code":"import{TurboModuleRegistry}from\"react-native-web/dist/index\";import'./polyfill';export function ensureNativeModulesAreInstalled(){if(globalThis.expo){return;}try{if(false){TurboModuleRegistry.get('ExpoModulesCore')?.installModules();}}catch(error){console.error(`Unable to install Expo modules: ${error}`);}}","map":{"version":3,"names":["TurboModuleRegistry","ensureNativeModulesAreInstalled","globalThis","expo","get","installModules","error","console"],"sources":["C:/QuizApp/ApocalypseQuiz/node_modules/expo-modules-core/src/ensureNativeModulesAreInstalled.ts"],"sourcesContent":["import { TurboModuleRegistry } from 'react-native';\n\n// Installs the expo global on web\nimport './polyfill';\n\n/**\n * Ensures that the native modules are installed in the current runtime.\n * Otherwise, it synchronously calls a native function that installs them.\n */\nexport function ensureNativeModulesAreInstalled(): void {\n  if (globalThis.expo) {\n    return;\n  }\n  try {\n    if (process.env.EXPO_OS !== 'web') {\n      // TODO: ExpoModulesCore shouldn't be optional here,\n      // but to keep backwards compatibility let's just ignore it in SDK 50.\n      // In most cases the modules were already installed from the native side.\n      (\n        TurboModuleRegistry.get('ExpoModulesCore') as { installModules: () => void } | null\n      )?.installModules();\n    }\n  } catch (error) {\n    console.error(`Unable to install Expo modules: ${error}`);\n  }\n}\n"],"mappings":"OAASA,mBAAmB,mCAG5B,MAAO,YAAY,CAMnB,MAAO,SAAS,CAAAC,+BAA+BA,CAAA,CAAS,CACtD,GAAIC,UAAU,CAACC,IAAI,CAAE,CACnB,OACF,CACA,GAAI,CACF,SAAmC,CAK/BH,mBAAmB,CAACI,GAAG,CAAC,iBAAiB,CAAC,EACzCC,cAAc,CAAC,CAAC,CACrB,CACF,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCA,KAAK,EAAE,CAAC,CAC3D,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
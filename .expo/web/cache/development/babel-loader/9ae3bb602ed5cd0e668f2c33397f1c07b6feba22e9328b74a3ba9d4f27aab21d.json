{"ast":null,"code":"var _jsxFileName = \"C:\\\\QuizApp\\\\ApocalypseQuiz\\\\node_modules\\\\expo-av\\\\build\\\\Video.js\";\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport { ResizeMode } from './Video.types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nlet didWarnAboutVideoDeprecation = false;\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\nclass Video extends React.Component {\n  _nativeRef = React.createRef();\n  _onPlaybackStatusUpdate = null;\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster\n    };\n  }\n  setNativeProps(nativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n  _handleNewStatus = status => {\n    if (this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n      this.setState({\n        showPoster: false\n      });\n    }\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n  _performOperationAndHandleStatusAsync = async operation => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n    let handle = null;\n    if (Platform.OS === 'web' && 'getVideoElement' in this._nativeRef.current) {\n      handle = this._nativeRef.current.getVideoElement();\n    }\n    if (Platform.OS !== 'web') {\n      handle = findNodeHandle(this._nativeRef.current);\n    }\n    if (!handle) {\n      throw new Error('failed to find node handle');\n    }\n    const status = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n  _setFullscreen = async value => {\n    return this._performOperationAndHandleStatusAsync(tag => ExpoVideoViewManager.setFullscreen(tag, value));\n  };\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n  getStatusAsync = async () => {\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.getStatusForVideo(tag));\n  };\n  loadAsync = async (source, initialStatus = {}, downloadFirst = true) => {\n    const {\n      nativeSource,\n      fullInitialStatus\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus));\n  };\n  unloadAsync = async () => {\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.unloadForVideo(tag));\n  };\n  componentWillUnmount() {\n    this.unloadAsync().catch(() => {});\n  }\n  setStatusAsync = async status => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.setStatusForVideo(tag, status));\n  };\n  replayAsync = async (status = {}) => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.replayVideo(tag, Object.assign({}, status, {\n      positionMillis: 0,\n      shouldPlay: true\n    })));\n  };\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n  _nativeOnPlaybackStatusUpdate = event => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n  _nativeOnLoad = event => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n  _nativeOnError = event => {\n    const error = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n  _nativeOnReadyForDisplay = event => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n  _nativeOnFullscreenUpdate = event => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n    return this.props.usePoster && this.state.showPoster ? _jsxDEV(PosterComponent, {\n      style: [_STYLES.poster, this.props.posterStyle],\n      source: this.props.posterSource\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 65\n    }, this) : null;\n  };\n  render() {\n    maybeWarnAboutVideoDeprecation();\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n    const status = Object.assign({}, this.props.status);\n    ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n    const nativeProps = Object.assign({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle', ...Object.keys(status)]), {\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate\n    });\n    return _jsxDEV(View, {\n      style: nativeProps.style,\n      children: [_jsxDEV(ExponentVideo, Object.assign({\n        ref: this._nativeRef\n      }, nativeProps, {\n        style: nativeProps.videoStyle\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), this._renderPoster()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }, this);\n  }\n}\nfunction omit(props, propNames) {\n  const copied = Object.assign({}, props);\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\nfunction maybeWarnAboutVideoDeprecation() {\n  if (__DEV__ && !didWarnAboutVideoDeprecation) {\n    didWarnAboutVideoDeprecation = true;\n    console.log('⚠️ \\x1b[33m[expo-av]: Video component from `expo-av` is deprecated in favor of `expo-video`. ' + 'See the documentation at https://docs.expo.dev/versions/latest/sdk/video/ for the new API reference.');\n  }\n}\nObject.assign(Video.prototype, PlaybackMixin);\nexport default Video;","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","Platform","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","jsxDEV","_jsxDEV","_STYLES","create","base","overflow","pointerEvents","poster","position","left","top","right","bottom","resizeMode","video","didWarnAboutVideoDeprecation","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","Component","_nativeRef","createRef","_onPlaybackStatusUpdate","constructor","props","state","showPoster","usePoster","setNativeProps","nativeProps","nativeVideo","current","Error","_handleNewStatus","status","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","operation","handle","OS","getVideoElement","_setFullscreen","value","tag","setFullscreen","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","componentWillUnmount","catch","setStatusAsync","setStatusForVideo","replayAsync","replayVideo","Object","assign","shouldPlay","setOnPlaybackStatusUpdate","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","PosterComponent","style","posterStyle","posterSource","fileName","_jsxFileName","lineNumber","columnNumber","render","maybeWarnAboutVideoDeprecation","undefined","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","keys","videoStyle","onStatusUpdate","children","ref","propNames","copied","propName","__DEV__","console","log","prototype"],"sources":["C:\\QuizApp\\ApocalypseQuiz\\node_modules\\expo-av\\src\\Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View, Platform } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n  PitchCorrectionQuality,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nlet didWarnAboutVideoDeprecation: boolean = false;\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    let handle = null;\n    if (Platform.OS === 'web' && 'getVideoElement' in this._nativeRef.current!) {\n      handle = (this._nativeRef.current as any).getVideoElement() as HTMLMediaElement;\n    }\n    if (Platform.OS !== 'web') {\n      handle = findNodeHandle(this._nativeRef.current)!;\n    }\n    if (!handle) {\n      throw new Error('failed to find node handle');\n    }\n\n    const status: AVPlaybackStatus = await operation(handle! as number);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    maybeWarnAboutVideoDeprecation();\n\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    (\n      [\n        'progressUpdateIntervalMillis',\n        'positionMillis',\n        'shouldPlay',\n        'rate',\n        'shouldCorrectPitch',\n        'volume',\n        'isMuted',\n        'isLooping',\n      ] as const\n    ).forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop] as any;\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style}>\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nfunction maybeWarnAboutVideoDeprecation() {\n  if (__DEV__ && !didWarnAboutVideoDeprecation) {\n    didWarnAboutVideoDeprecation = true;\n    console.log(\n      '⚠️ \\x1b[33m[expo-av]: Video component from `expo-av` is deprecated in favor of `expo-video`. ' +\n        'See the documentation at https://docs.expo.dev/versions/latest/sdk/video/ for the new API reference.'\n    );\n  }\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}